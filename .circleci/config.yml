version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            exit 0
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: backend-build
          
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
# Define the jobs we want to run for this project
jobs:
#Job for building frontend 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            sudo npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

#Job for building backend  

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Compiled code will be retrieved by deploy-backend.yml 
          command: |
            mkdir /tmp/workspace/
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
            tar -zcvf ./../../backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - package.json
            - backend.tar.gz
#Job for testing frontend            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build      
      # Your job code here
      - run:
          name: test frontend
          command: |
            cd frontend
            npm i
            npm run test     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: test backend
          command: |
            # Your code here
            cd backend
            npm i
            npm run test


# add anlyze phase : scan front-end 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: scan frontend vulnerability
          command: |
            # Your code here
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force


# add anlyze phase : scan back-end 
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build
      # Your job code here
      - run:
          name: scan backend vulnerability
          command: |
            # Your code here
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

            ########
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Tar since its a requesite 
          command: |
            yum -y install tar gzip jq git 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags Name=frontend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure     
      - destroy-environment       

      #####        
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: 
            - "47:10:b8:d7:c5:40:4c:5d:34:3b:93:8c:51:09:b8:ff"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cd ..
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      
      - revert-migrations

      ##################
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-build
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Run migrations
          command: |
            cd backend/src

            npm cache clean --force

            npm install 
            npm run migrations > migrations.txt
            cat migrations.txt
           
      
      - run:
          name: Send migration results to kvdb
          command: |
              if grep -q "SELECT" ~/project/backend/src/migrations.txt
              then
                    # If you are using kvdb.io, generate the bucket ID "${KVDB_BUCKET}" in your local terminal first
                  curl --insecure https://kvdb.io/3Py67eqbSFJPoRGXETFtrJ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 'success'
              fi

            # curl -H "Content-Type: text/plain" \
            #   -H "token: 3Py67eqbSFJPoRGXETFtrJ" \
            #   --request PUT --data "1" \
            #   https://kvdb.io/3Py67eqbSFJPoRGXETFtrJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      # Here's where you will add some code to rollback on failure
      # - run:
      #     name: Revert migrations
      #     when: on_fail
      - destroy-environment       

      - revert-migrations


  deploy-frontend:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url and setup environment variables
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd ./frontend
            pwd
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist

      - revert-migrations
      - destroy-environment   


  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['47:10:b8:d7:c5:40:4c:5d:34:3b:93:8c:51:09:b8:ff']
      # attach workspace
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 20m
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment 
#######

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here            
            pip install awscli
            apk add --update curl nodejs npm
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --region eu-central-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees"            
            curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees | grep "Welcome"
            echo ${URL} 
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment


# Orchestrate our job run sequence
workflows:
  build_and_test:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      -  deploy-infrastructure:
          requires:  [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]